syntax = "proto3";

package pb;

import "auth_payload.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "./protobuf";

// OpenAPI/Swagger configuration
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Auth Service API";
    version: "1.0.0";
    description: "Authentication and authorization microservice with gRPC and HTTP support";
    contact: {
      name: "Auth Service Team";
      email: "support@authservice.com";
    };
  };
  security_definitions: {
        security: {
                key: "bearer"
                value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
                description: "Authentication token, prefixed by Bearer: Bearer <token>"
            }
        }
    }
    security: {
        security_requirement: {
            key: "bearer"
        }
    }
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service AuthService {
  // Health check endpoint to verify service status
  rpc Health(HealthRequest) returns (HealthResponse) {
    option (google.api.http) = {
      get: "/api/v1/health"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Health Check"]
      summary: "Health Check"
      description: "This API checks the health status of the auth service. Used by load balancers and monitoring systems to verify service availability."
    };
  }
}
